{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Αντίγραφο Αντίγραφο Lab 1B Notebook.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/codegithubka/Physics-4AL-Gooogle-Collab-Files/blob/main/%CE%91%CE%BD%CF%84%CE%AF%CE%B3%CF%81%CE%B1%CF%86%CE%BF_%CE%91%CE%BD%CF%84%CE%AF%CE%B3%CF%81%CE%B1%CF%86%CE%BF_Lab_1B_Notebook.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-EM3FcfSiEUB"
      },
      "source": [
        "## Arrays and plotting"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9org2Yb2iEQ_"
      },
      "source": [
        "**Problem 1**\n",
        "\n",
        "The following are the x and y coordinates for a number of objects. Run the cell below"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bJhGKo9niEO8"
      },
      "source": [
        "import numpy as np\n",
        "positions = np.array([[2., 4.],\n",
        "             [1., 3.],\n",
        "             [7., 2.],\n",
        "             [1., 8.],\n",
        "             [9., 2.]])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3fEdqClTiEMj"
      },
      "source": [
        "Calculate the distances to each of the objects from the origin"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "u6h5DgiGiEJf",
        "outputId": "019569d6-8d69-477d-e73e-facfa5050331",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "# Separate out the x coordinates here\n",
        "x_position = np.array([2.0, 1.0, 7.0, 1.0, 9.0])\n",
        "\n",
        "# Separate out the y coordinates here\n",
        "y_position = np.array([4.0, 3.0, 2.0, 8.0, 2.0])\n",
        "\n",
        "# Calculate the distances from the origin\n",
        "distance = np.array(x_position**2. + y_position**2.)\n",
        "# Print the distances\n",
        "print(distance)\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[20. 10. 53. 65. 85.]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9Swy7Lbzh-EM"
      },
      "source": [
        "**Problem 2**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5WCMjUHIh9eW"
      },
      "source": [
        "Read in the data that you downloaded from Slide 7 of lab 1B."
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Run this cell to mount your Google Drive.\n",
        "from google.colab import drive\n",
        "drive.mount('/content/gdrive')"
      ],
      "metadata": {
        "id": "bnWf0PiIdYgx",
        "outputId": "232214e2-8582-48ca-f2c9-9fedf1db5e56",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/gdrive\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Read in data, find the right source in your google drive\n",
        "# read_in_array = np.loadtxt('/content/gdrive/MyDrive/4AL Winter 2022/practicelineardata.txt') - for reference\n",
        "import numpy as np\n",
        "read_in_array = np.loadtxt('/content/gdrive/MyDrive/Colab Notebooks/practicelineardata.txt')"
      ],
      "metadata": {
        "id": "dc0E3VXedaRr"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UNVZZ7lL7e0T",
        "outputId": "416fe63d-f593-4a6f-8ba1-364caf6c5010"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Remember from that if you have a two dimensional array, you can separate the colums or rows out using the : symbol, which indicates to grab all of the elements from a column. Separate out the first one and the second one. "
      ],
      "metadata": {
        "id": "YOZoZaFDdgpW"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# The first column is the x axis, second is y axis\n",
        "x = read_in_array[:, 0]\n",
        "y = read_in_array[:, 1]\n",
        "\n",
        "# Take all of the elements in 0th column\n",
        "print(x)\n",
        "# Take all of the elements in the 1st column\n",
        "print(y)\n"
      ],
      "metadata": {
        "id": "SrQCslPTdgJh",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "3d4e916d-8bf2-4383-f78d-07979af6de5c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[ 0.  1.  2.  3.  4.  5.  6.  7.  8.  9. 10. 11. 12. 13. 14. 15. 16. 17.\n",
            " 18. 19. 20. 21. 22. 23. 24. 25. 26. 27. 28. 29. 30. 31. 32. 33. 34. 35.\n",
            " 36. 37. 38. 39. 40. 41. 42. 43. 44. 45. 46. 47. 48. 49. 50. 51. 52. 53.\n",
            " 54. 55. 56. 57. 58. 59. 60. 61. 62. 63. 64. 65. 66. 67. 68. 69. 70. 71.\n",
            " 72. 73. 74. 75. 76. 77. 78. 79. 80. 81. 82. 83. 84. 85. 86. 87. 88. 89.\n",
            " 90. 91. 92. 93. 94. 95. 96. 97. 98. 99.]\n",
            "[ 28. -17.  32.  40.  88.  83.  45.  24.  24.  12. 105.  54.  89.  89.\n",
            "  75.  83.  30.  42.  44.  78.  84. 131. 111. 146. 152.  86.  91. 121.\n",
            "  99. 117. 122. 158. 167. 115. 159. 110. 146. 121. 133. 162. 173. 126.\n",
            " 200. 128. 171. 189. 193. 162. 162. 169. 191. 192. 200. 178. 227. 201.\n",
            " 193. 171. 194. 231. 260. 176. 207. 240. 253. 227. 210. 215. 205. 244.\n",
            " 260. 268. 261. 257. 215. 297. 242. 283. 219. 248. 304. 262. 298. 285.\n",
            " 320. 282. 304. 304. 244. 325. 274. 258. 269. 269. 346. 320. 333. 361.\n",
            " 300. 334.]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Plot a scatter plot (plt.scatter). Provide axes labels - get creative with your axes labels."
      ],
      "metadata": {
        "id": "fFTqOTrbdlIO"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# x-array\n",
        "x_axis = read_in_array[:, 0]\n",
        "# y-array\n",
        "y_axis = read_in_array[:, 1]\n",
        "\n",
        "# Make the scatter plot \n",
        "plt.scatter(x_axis, y_axis)\n",
        "\n",
        "# Label the x axis\n",
        "plt.xlabel(\"Some Quantity (units)\")\n",
        "# Label the y axis\n",
        "plt.ylabel(\"Other Quantity (units)\")\n",
        "\n",
        "# Give the plots a title\n",
        "plt.title(\"Notebook Plot\")\n",
        "\n"
      ],
      "metadata": {
        "id": "6t6DMDFmdov-",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 313
        },
        "outputId": "32aa0eb4-7cc4-4731-9744-05a3a4f85d79"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 1.0, 'Notebook Plot')"
            ]
          },
          "metadata": {},
          "execution_count": 10
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Use polyfit to generate the best fit line and plot it along with everything you plotted in the previous cell. Use a legend to differentiate between the data and the polyfit curve."
      ],
      "metadata": {
        "id": "IpYNCxvcdqhq"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Copy and paste everything from the previous cell under this line\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# x-array\n",
        "x_axis = read_in_array[:, 0]\n",
        "# y-array\n",
        "y_axis = read_in_array[:, 1]\n",
        "\n",
        "# Make the scatter plot \n",
        "plt.scatter(x_axis, y_axis)\n",
        "\n",
        "# Label the x axis\n",
        "plt.xlabel(\"Some Quantity (units)\")\n",
        "# Label the y axis\n",
        "plt.ylabel(\"Other Quantity (units)\")\n",
        "\n",
        "# Give the plots a title\n",
        "plt.title(\"Notebook Plot\")\n",
        "\n",
        "\n",
        "# # np.polyfit() requires at least 3 arguments or inputs\n",
        "# The x-axis data, the y-axis data and the degree of the polynomial that we are trying to fit - save the results in an array\n",
        "coeff_linear = np.polyfit(x_axis, y_axis, 1)\n",
        "\n",
        "# The zeroth element is the slope and first element is the intercept\n",
        "print(coeff_linear)\n",
        "\n",
        "# plt.plot() generates a connected line - plot the best fit line\n",
        "plt.plot(x_axis, coeff_linear[0]*x_axis+coeff_linear[1], label = \"distance\")\n",
        "plt.scatter(x_axis, y_axis, label = \"plot line\")\n",
        "\n",
        "# Create labels in both the plt.scatter() and plt.plot() to apply for the legend\n",
        "\n",
        "# Remember to use plt.legend()\n",
        "plt.legend()\n"
      ],
      "metadata": {
        "id": "OMZFCYXKdtvE",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 330
        },
        "outputId": "b5aec013-fc37-44fa-f5c0-2f07efa1a504"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[ 3.00135014 31.52316832]\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7f9cbcb695d0>"
            ]
          },
          "metadata": {},
          "execution_count": 12
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "a7GQ8xJnh_3T"
      },
      "source": [
        "**Problem 3**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "exoP6NCqiD6b"
      },
      "source": [
        "The position of an object in motion can be given by $x=x_0 + ut + \\frac{1}{2}at^{2}$. Plot the position of the object (position on y axis and time on x axis) starting from t=0 to t=5 seconds for the follow case. (Use np.linspace to create maybe 100 points for time on the x-axis)\n",
        "\n",
        "Object falls freely from a height of 500 metres. Assume acceleration due to gravity as 9.8 $m/s^2$."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "FFJbJ141iD2A",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 313
        },
        "outputId": "813ea725-53a4-4407-ad76-721a2b1df0b8"
      },
      "source": [
        "# x-array\n",
        "x_axis = np.linspace(0., 5., 100)\n",
        "# y-array\n",
        "y_axis = 500. - 3.*x_axis - 0.5*9.8*x_axis**2\n",
        "\n",
        "# Make the continuous plot\n",
        "plt.plot(x_axis, y_axis, color = \"blue\")\n",
        "plt.scatter(x_axis, y_axis)\n",
        "# Label the x axis\n",
        "plt.xlabel(\"x-axis (units)\")\n",
        "# Label the y axis\n",
        "plt.ylabel(\"y-axis (units)\")\n",
        "# Give the plot a title\n",
        "plt.title(\"Plot title\")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 1.0, 'Plot title')"
            ]
          },
          "metadata": {},
          "execution_count": 22
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1xBxsBzwZ-jd"
      },
      "source": [
        "*Developed by Pauline Arriaga* \n",
        "\n",
        "*rev. 2.0 S.Gowda 1-06-2022*\n",
        "\n",
        "*© Regents of the University of California*\n"
      ]
    }
  ]
}
